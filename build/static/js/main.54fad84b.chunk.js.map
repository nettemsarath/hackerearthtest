{"version":3,"sources":["helpers/getRandomColor.js","components/Bargraph.js","components/Piegraph.js","services/chartData.js","slices/charts.js","components/CustomGraph.js","components/Graph.js","App.js","store/index.js","index.js"],"names":["getRandomColor","color","i","Math","floor","random","Bargraph","graphData","title","id","type","handleUpdateGraphItem","useState","enteredText","setEnteredText","style","display","justifyContent","alignItems","placeholder","margin","padding","value","onChange","e","target","onClick","newEnteredgraphvalues","split","elements","map","element","BarChart","width","height","data","top","right","left","bottom","XAxis","dataKey","fontFamily","tickSize","dy","YAxis","hide","Bar","barSize","entry","Cell","fill","Piegraph","PieChart","Pie","valueKey","cx","cy","innerRadius","outerRadius","paddingAngle","index","TESTDATA","fetchChartData","a","config","headers","axios","get","process","fetchUsersData","createAsyncThunk","chartdata","newData","chartSlice","createSlice","name","initialState","loading","error","reducers","addItem","state","action","console","log","payload","push","updateItem","removeItem","filter","extraReducers","pending","fulfilled","rejected","actions","CustomGraph","useDispatch","customchartData","useSelector","charts","useEffect","Graph","dispatch","newItem","length","App","className","fontSize","store","configureStore","reducer","chartReducer","devTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54fad84b.chunk.js","sourcesContent":["const getRandomColor = () => {\n  const letters = \"0123456789ABCDEF\";\n  let color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\nexport { getRandomColor };\n","import React, { useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, Cell } from \"recharts\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\n\nconst Bargraph = ({ graphData, title, id, type, handleUpdateGraphItem }) => {\n  const [enteredText, setEnteredText] = useState(\"\");\n  const handleChange = (e) => {\n    setEnteredText(e.target.value);\n  };\n  const handleSubmit = () => {\n    const newEnteredgraphvalues = enteredText.split(\",\");\n    handleUpdateGraphItem({\n      type: type,\n      id: id,\n      elements: newEnteredgraphvalues.map((element) => {\n        return {\n          value: element,\n          color: getRandomColor(),\n        };\n      }),\n    });\n  };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div>\n        <div> {title} </div>\n        <p> Edit values to see the changes in the Graph </p>\n        <input\n          placeholder=\"12,22,34,45,56\"\n          style={{ margin: \"10px\", padding: \"5px\" }}\n          value={enteredText}\n          onChange={handleChange}\n        />\n        <button onClick={handleSubmit}>submit</button>\n      </div>\n\n      <BarChart\n        width={500}\n        height={250}\n        data={graphData}\n        margin={{ top: 25, right: 10, left: 0, bottom: 25 }}\n      >\n        <XAxis dataKey=\"value\" fontFamily=\"sans-serif\" tickSize dy=\"25\" />\n        <YAxis hide />\n\n        <Bar dataKey=\"value\" barSize={20} fontFamily=\"sans-serif\">\n          {graphData.map((entry) => (\n            <Cell fill={entry.color} />\n          ))}\n        </Bar>\n      </BarChart>\n    </div>\n  );\n};\n\nexport default Bargraph;\n","import React, { useState } from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\n\nconst Piegraph = ({ graphData, title, id, type, handleUpdateGraphItem }) => {\n  const [enteredText, setEnteredText] = useState(\"\");\n  const handleChange = (e) => {\n    setEnteredText(e.target.value);\n  };\n  const handleSubmit = () => {\n    const newEnteredgraphvalues = enteredText.split(\",\");\n    handleUpdateGraphItem({\n      type: type,\n      id: id,\n      elements: newEnteredgraphvalues.map((element) => {\n        return {\n          value: element,\n          color: getRandomColor(),\n        };\n      }),\n    });\n  };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div>\n        <div> {title} </div>\n        <p> Edit values to see the changes in the Graph </p>\n        <input\n          placeholder=\"12,22,34,45,56\"\n          style={{ margin: \"10px\", padding: \"5px\" }}\n          value={enteredText}\n          onChange={handleChange}\n        />\n        <button onClick={handleSubmit}>submit</button>\n      </div>\n      <PieChart width={600} height={400}>\n        <Pie\n          dataKey=\"value\"\n          valueKey=\"value\"\n          data={graphData}\n          cx={120}\n          cy={200}\n          innerRadius={60}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          paddingAngle={5}\n        >\n          {graphData.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Pie>\n      </PieChart>\n    </div>\n  );\n};\n\nexport default Piegraph;\n","import axios from \"axios\";\nconst FETCHAPIURL = process.env.REACT_APP_TESTFETCHAPIURL;\n\nconst TESTDATA = [\n  {\n    type: \"Bar\",\n    elements: [1, 9, 15, 3, 7, 9],\n  },\n  {\n    type: \"Bar\",\n    elements: [1, 9, 15, 3, 7, 9],\n  },\n  {\n    type: \"Pie\",\n    elements: [50, 50],\n  },\n  {\n    type: \"Pie\",\n    elements: [25, 25, 50],\n  },\n  {\n    type: \"Bar\",\n    elements: [1, 2, 3, 4, 5],\n  },\n  {\n    type: \"Pie\",\n    elements: [10, 20, 30, 40],\n  },\n  {\n    type: \"Pie\",\n    elements: [20, 20, 20, 20, 20],\n  },\n  {\n    type: \"Bar\",\n    elements: [20, 20, 20, 20, 20],\n  },\n  {\n    type: \"Bar\",\n    elements: [25, 25, 50],\n  },\n];\n\nconst fetchChartData = async () => {\n  try {\n    const config = {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    };\n    const data = await axios.get(FETCHAPIURL, config);\n    return TESTDATA;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport { fetchChartData };\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchChartData } from \"services/chartData\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\n\nexport const fetchUsersData = createAsyncThunk(\"charts/get\", async () => {\n  const chartdata = await fetchChartData();\n  const newData = chartdata.map((data, index) => {\n    return {\n      type: data.type,\n      id: index,\n      elements: data.elements.map((element) => {\n        return {\n          value: element,\n          color: getRandomColor(),\n        };\n      }),\n    };\n  });\n  return newData;\n});\n\nconst initialData = {\n  loading: false,\n  chartdata: [],\n  error: false,\n};\n\nconst chartSlice = createSlice({\n  name: \"charts\",\n  initialState: initialData,\n  reducers: {\n    addItem: (state, action) => {\n      console.log(\"action.payload\", action.payload);\n      state.chartdata.push(action.payload);\n    },\n    updateItem: (state, action) => {\n      console.log(\"action.payload\", action.payload);\n      state.chartdata[action.payload.id] = action.payload;\n    },\n    removeItem: (state, action) => {\n      state.chartdata.filter((data) => data.id !== action.payload.id);\n    },\n  },\n  extraReducers: {\n    [fetchUsersData.pending](state, action) {\n      state.loading = true;\n    },\n    [fetchUsersData.fulfilled](state, action) {\n      state.loading = false;\n      state.chartdata = action.payload;\n    },\n    [fetchUsersData.rejected](state, action) {\n      state.loading = false;\n      state.error = true;\n    },\n  },\n});\n\nexport default chartSlice.reducer;\n\nexport const { addItem, removeItem, updateItem } = chartSlice.actions;\n","import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateItem } from \"slices/charts\";\n\nconst CustomGraph = () => {\n  const dispatch = useDispatch();\n  const { chartdata: customchartData } = useSelector((state) => state.charts);\n  console.log(\"customchartData\", customchartData);\n  useEffect(() => {\n    const newItem = {\n      id: 1,\n      type: \"Bar\",\n      elements: [\n        { value: 1, color: \"#1CCCD0\" },\n        { value: 9, color: \"#9ECD71\" },\n        { value: 9, color: \"#E32F05\" },\n      ],\n    };\n    // dispatch(updateItem(newItem));\n  }, []);\n\n  return <div>CustomGraph...</div>;\n};\n\nexport default CustomGraph;\n","import React from \"react\";\nimport Bargraph from \"./Bargraph\";\nimport Piegraph from \"./Piegraph\";\n// import useChartData from \"hooks/useChartData\";\nimport CustomGraph from \"./CustomGraph\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateItem } from \"slices/charts\";\n\nconst Graph = () => {\n  // const [loading, data, error] = useChartData();\n  const dispatch = useDispatch();\n  const { chartdata, loading, error } = useSelector((state) => state.charts);\n  const handleUpdateGraphItem = (newItem) => {\n    dispatch(updateItem(newItem));\n  };\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      {chartdata.length && !loading ? (\n        <div>\n          {chartdata.map((chartdata, index) => {\n            if (chartdata.type === \"Bar\") {\n              return (\n                <Bargraph\n                  key={index}\n                  type={chartdata.type}\n                  id={chartdata.id}\n                  graphData={chartdata.elements}\n                  title=\"Bar Graph\"\n                  handleUpdateGraphItem={handleUpdateGraphItem}\n                />\n              );\n            } else if (chartdata.type === \"Pie\") {\n              return (\n                <Piegraph\n                  key={index}\n                  type={chartdata.type}\n                  id={chartdata.id}\n                  graphData={chartdata.elements}\n                  title=\"Pie Graph\"\n                  handleUpdateGraphItem={handleUpdateGraphItem}\n                />\n              );\n            }\n            return null;\n          })}\n        </div>\n      ) : null}\n      <CustomGraph />\n    </div>\n  );\n};\n\nexport default Graph;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Graph from \"components/Graph\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { fetchUsersData } from \"slices/charts\";\n// import { addItem, removeItem, getChartData } from \"slices/charts\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchUsersData());\n  }, []);\n  return (\n    <div className=\"App\">\n      <div style={{ fontSize: \"40px\", color: \"black\" }}>\n        <b>Graphs</b>\n      </div>\n      <Graph />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport chartReducer from \"slices/charts\";\n\nconst store = configureStore({\n  reducer: {\n    charts: chartReducer,\n  },\n  devTools: true,\n});\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}