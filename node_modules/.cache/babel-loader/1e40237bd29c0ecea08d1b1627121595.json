{"ast":null,"code":"import _slicedToArray from\"/home/sarath/React-learn/hackerearthtask/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{PieChart,Pie,Cell}from\"recharts\";import{getRandomColor}from\"helpers/getRandomColor\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var Piegraph=function Piegraph(_ref){var graphData=_ref.graphData,title=_ref.title,id=_ref.id,type=_ref.type,handleUpdateGraphItem=_ref.handleUpdateGraphItem;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),enteredText=_useState2[0],setEnteredText=_useState2[1];var handleChange=function handleChange(e){setEnteredText(e.target.value);};var handleSubmit=function handleSubmit(){var newEnteredgraphvalues=enteredText.split(\",\");handleUpdateGraphItem({type:type,id:id,elements:newEnteredgraphvalues.map(function(element){return{value:element,color:getRandomColor()};})});};return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",justifyContent:\"center\",alignItems:\"center\"},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[\" \",title,\" \"]}),/*#__PURE__*/_jsx(\"p\",{children:\" Edit values to see the changes in the Graph \"}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"12,22,34,45,56\",style:{margin:\"10px\",padding:\"5px\"},value:enteredText,onChange:handleChange}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSubmit,children:\"submit\"})]}),/*#__PURE__*/_jsx(PieChart,{width:600,height:400,children:/*#__PURE__*/_jsx(Pie,{dataKey:\"value\",valueKey:\"value\",data:graphData,cx:120,cy:200,innerRadius:60,outerRadius:80,fill:\"#8884d8\",paddingAngle:5,children:graphData.map(function(entry,index){return/*#__PURE__*/_jsx(Cell,{fill:entry.color},\"cell-\".concat(index));})})})]});};export default Piegraph;","map":{"version":3,"sources":["/home/sarath/React-learn/hackerearthtask/src/components/Piegraph.js"],"names":["React","useState","PieChart","Pie","Cell","getRandomColor","Piegraph","graphData","title","id","type","handleUpdateGraphItem","enteredText","setEnteredText","handleChange","e","target","value","handleSubmit","newEnteredgraphvalues","split","elements","map","element","color","display","justifyContent","alignItems","margin","padding","entry","index"],"mappings":"+JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,QAAT,CAAmBC,GAAnB,CAAwBC,IAAxB,KAAoC,UAApC,CACA,OAASC,cAAT,KAA+B,wBAA/B,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAA2D,IAAxDC,CAAAA,SAAwD,MAAxDA,SAAwD,CAA7CC,KAA6C,MAA7CA,KAA6C,CAAtCC,EAAsC,MAAtCA,EAAsC,CAAlCC,IAAkC,MAAlCA,IAAkC,CAA5BC,qBAA4B,MAA5BA,qBAA4B,CAC1E,cAAsCV,QAAQ,CAAC,EAAD,CAA9C,wCAAOW,WAAP,eAAoBC,cAApB,eACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CAC1BF,cAAc,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd,CACD,CAFD,CAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAMC,CAAAA,qBAAqB,CAAGP,WAAW,CAACQ,KAAZ,CAAkB,GAAlB,CAA9B,CACAT,qBAAqB,CAAC,CACpBD,IAAI,CAAEA,IADc,CAEpBD,EAAE,CAAEA,EAFgB,CAGpBY,QAAQ,CAAEF,qBAAqB,CAACG,GAAtB,CAA0B,SAACC,OAAD,CAAa,CAC/C,MAAO,CACLN,KAAK,CAAEM,OADF,CAELC,KAAK,CAAEnB,cAAc,EAFhB,CAAP,CAID,CALS,CAHU,CAAD,CAArB,CAUD,CAZD,CAaA,mBACE,aACE,KAAK,CAAE,CACLoB,OAAO,CAAE,MADJ,CAELC,cAAc,CAAE,QAFX,CAGLC,UAAU,CAAE,QAHP,CADT,wBAOE,oCACE,2BAAOnB,KAAP,OADF,cAEE,oEAFF,cAGE,cACE,WAAW,CAAC,gBADd,CAEE,KAAK,CAAE,CAAEoB,MAAM,CAAE,MAAV,CAAkBC,OAAO,CAAE,KAA3B,CAFT,CAGE,KAAK,CAAEjB,WAHT,CAIE,QAAQ,CAAEE,YAJZ,EAHF,cASE,eAAQ,OAAO,CAAEI,YAAjB,oBATF,GAPF,cAkBE,KAAC,QAAD,EAAU,KAAK,CAAE,GAAjB,CAAsB,MAAM,CAAE,GAA9B,uBACE,KAAC,GAAD,EACE,OAAO,CAAC,OADV,CAEE,QAAQ,CAAC,OAFX,CAGE,IAAI,CAAEX,SAHR,CAIE,EAAE,CAAE,GAJN,CAKE,EAAE,CAAE,GALN,CAME,WAAW,CAAE,EANf,CAOE,WAAW,CAAE,EAPf,CAQE,IAAI,CAAC,SARP,CASE,YAAY,CAAE,CAThB,UAWGA,SAAS,CAACe,GAAV,CAAc,SAACQ,KAAD,CAAQC,KAAR,qBACb,KAAC,IAAD,EAA4B,IAAI,CAAED,KAAK,CAACN,KAAxC,iBAAmBO,KAAnB,EADa,EAAd,CAXH,EADF,EAlBF,GADF,CAsCD,CAxDD,CA0DA,cAAezB,CAAAA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\n\nconst Piegraph = ({ graphData, title, id, type, handleUpdateGraphItem }) => {\n  const [enteredText, setEnteredText] = useState(\"\");\n  const handleChange = (e) => {\n    setEnteredText(e.target.value);\n  };\n  const handleSubmit = () => {\n    const newEnteredgraphvalues = enteredText.split(\",\");\n    handleUpdateGraphItem({\n      type: type,\n      id: id,\n      elements: newEnteredgraphvalues.map((element) => {\n        return {\n          value: element,\n          color: getRandomColor(),\n        };\n      }),\n    });\n  };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div>\n        <div> {title} </div>\n        <p> Edit values to see the changes in the Graph </p>\n        <input\n          placeholder=\"12,22,34,45,56\"\n          style={{ margin: \"10px\", padding: \"5px\" }}\n          value={enteredText}\n          onChange={handleChange}\n        />\n        <button onClick={handleSubmit}>submit</button>\n      </div>\n      <PieChart width={600} height={400}>\n        <Pie\n          dataKey=\"value\"\n          valueKey=\"value\"\n          data={graphData}\n          cx={120}\n          cy={200}\n          innerRadius={60}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          paddingAngle={5}\n        >\n          {graphData.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Pie>\n      </PieChart>\n    </div>\n  );\n};\n\nexport default Piegraph;\n"]},"metadata":{},"sourceType":"module"}