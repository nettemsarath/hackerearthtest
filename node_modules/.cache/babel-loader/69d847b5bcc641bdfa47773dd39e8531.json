{"ast":null,"code":"var _jsxFileName = \"/home/sarath/React-learn/hackerearthtask/src/components/Bargraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, Cell } from \"recharts\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bargraph = _ref => {\n  _s();\n\n  let {\n    graphData,\n    title,\n    id,\n    type,\n    handleUpdateGraphItem\n  } = _ref;\n  const [enteredText, setEnteredText] = useState(\"\");\n\n  const handleChange = e => {\n    setEnteredText(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    const newEnteredgraphvalues = enteredText.split(\",\");\n    handleUpdateGraphItem({\n      type: type,\n      id: id,\n      elements: newEnteredgraphvalues.map(element => {\n        return {\n          value: element,\n          color: getRandomColor()\n        };\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Edit values to see the changes in the Graph \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"12,22,34,45,56\",\n        style: {\n          margin: \"10px\",\n          padding: \"5px\"\n        },\n        value: enteredText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 500,\n      height: 250,\n      data: graphData,\n      margin: {\n        top: 25,\n        right: 10,\n        left: 0,\n        bottom: 25\n      },\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"value\",\n        fontFamily: \"sans-serif\",\n        tickSize: true,\n        dy: \"25\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        hide: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"value\",\n        barSize: 20,\n        fontFamily: \"sans-serif\",\n        children: graphData.map(entry => /*#__PURE__*/_jsxDEV(Cell, {\n          fill: entry.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bargraph, \"znzL/pmtkvVt3hZyJzgC7WHc9/8=\");\n\n_c = Bargraph;\nexport default Bargraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bargraph\");","map":{"version":3,"sources":["/home/sarath/React-learn/hackerearthtask/src/components/Bargraph.js"],"names":["React","useState","BarChart","Bar","XAxis","YAxis","Cell","getRandomColor","Bargraph","graphData","title","id","type","handleUpdateGraphItem","enteredText","setEnteredText","handleChange","e","target","value","handleSubmit","newEnteredgraphvalues","split","elements","map","element","color","display","justifyContent","alignItems","margin","padding","top","right","left","bottom","entry"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, Cell } from \"recharts\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\n\nconst Bargraph = ({ graphData, title, id, type, handleUpdateGraphItem }) => {\n  const [enteredText, setEnteredText] = useState(\"\");\n  const handleChange = (e) => {\n    setEnteredText(e.target.value);\n  };\n  const handleSubmit = () => {\n    const newEnteredgraphvalues = enteredText.split(\",\");\n    handleUpdateGraphItem({\n      type: type,\n      id: id,\n      elements: newEnteredgraphvalues.map((element) => {\n        return {\n          value: element,\n          color: getRandomColor(),\n        };\n      }),\n    });\n  };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div>\n        <div> {title} </div>\n        <p> Edit values to see the changes in the Graph </p>\n        <input\n          placeholder=\"12,22,34,45,56\"\n          style={{ margin: \"10px\", padding: \"5px\" }}\n          value={enteredText}\n          onChange={handleChange}\n        />\n        <button onClick={handleSubmit}>submit</button>\n      </div>\n\n      <BarChart\n        width={500}\n        height={250}\n        data={graphData}\n        margin={{ top: 25, right: 10, left: 0, bottom: 25 }}\n      >\n        <XAxis dataKey=\"value\" fontFamily=\"sans-serif\" tickSize dy=\"25\" />\n        <YAxis hide />\n\n        <Bar dataKey=\"value\" barSize={20} fontFamily=\"sans-serif\">\n          {graphData.map((entry) => (\n            <Cell fill={entry.color} />\n          ))}\n        </Bar>\n      </BarChart>\n    </div>\n  );\n};\n\nexport default Bargraph;\n"]},"metadata":{},"sourceType":"module"}