{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchChartData } from \"services/chartData\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\nexport const fetchUsersData = createAsyncThunk(\"charts/get\", async () => {\n  const chartdata = await fetchChartData();\n  const newData = chartdata.map(data => {\n    return {\n      type: data.type,\n      elements: data.elements.map(element => {\n        return {\n          value: element,\n          color: getRandomColor()\n        };\n      })\n    };\n  });\n  return newData;\n});\nconst initialData = {\n  loading: false,\n  chartdata: [],\n  error: false\n};\nconst chartSlice = createSlice({\n  name: \"charts\",\n  initialState: initialData,\n  reducers: {\n    addItem: (state, action) => {\n      console.log(\"action.payload\", action.payload);\n      state.chartdata.push(action.payload);\n    },\n    removeItem: (state, action) => {\n      state.chartdata.filter(data => data.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [fetchUsersData.pending](state, action) {\n      state.loading = true;\n    },\n\n    [fetchUsersData.fulfilled](state, action) {\n      state.loading = false;\n      state.chartdata = action.payload;\n    },\n\n    [fetchUsersData.rejected](state, action) {\n      state.loading = false;\n      state.error = true;\n    }\n\n  }\n});\nexport default chartSlice.reducer;\nexport const {\n  addItem,\n  removeItem\n} = chartSlice.actions;","map":{"version":3,"sources":["/home/sarath/React-learn/hackerearthtask/src/slices/charts.js"],"names":["createSlice","createAsyncThunk","fetchChartData","getRandomColor","fetchUsersData","chartdata","newData","map","data","type","elements","element","value","color","initialData","loading","error","chartSlice","name","initialState","reducers","addItem","state","action","console","log","payload","push","removeItem","filter","id","extraReducers","pending","fulfilled","rejected","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AAEA,OAAO,MAAMC,cAAc,GAAGH,gBAAgB,CAAC,YAAD,EAAe,YAAY;AACvE,QAAMI,SAAS,GAAG,MAAMH,cAAc,EAAtC;AACA,QAAMI,OAAO,GAAGD,SAAS,CAACE,GAAV,CAAeC,IAAD,IAAU;AACtC,WAAO;AACLC,MAAAA,IAAI,EAAED,IAAI,CAACC,IADN;AAELC,MAAAA,QAAQ,EAAEF,IAAI,CAACE,QAAL,CAAcH,GAAd,CAAmBI,OAAD,IAAa;AACvC,eAAO;AACLC,UAAAA,KAAK,EAAED,OADF;AAELE,UAAAA,KAAK,EAAEV,cAAc;AAFhB,SAAP;AAID,OALS;AAFL,KAAP;AASD,GAVe,CAAhB;AAWA,SAAOG,OAAP;AACD,CAd6C,CAAvC;AAgBP,MAAMQ,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAE,KADS;AAElBV,EAAAA,SAAS,EAAE,EAFO;AAGlBW,EAAAA,KAAK,EAAE;AAHW,CAApB;AAMA,MAAMC,UAAU,GAAGjB,WAAW,CAAC;AAC7BkB,EAAAA,IAAI,EAAE,QADuB;AAE7BC,EAAAA,YAAY,EAAEL,WAFe;AAG7BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,MAAM,CAACG,OAArC;AACAJ,MAAAA,KAAK,CAACjB,SAAN,CAAgBsB,IAAhB,CAAqBJ,MAAM,CAACG,OAA5B;AACD,KAJO;AAKRE,IAAAA,UAAU,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACjB,SAAN,CAAgBwB,MAAhB,CAAwBrB,IAAD,IAAUA,IAAI,CAACsB,EAAL,KAAYP,MAAM,CAACG,OAAP,CAAeI,EAA5D;AACD;AAPO,GAHmB;AAY7BC,EAAAA,aAAa,EAAE;AACb,KAAC3B,cAAc,CAAC4B,OAAhB,EAAyBV,KAAzB,EAAgCC,MAAhC,EAAwC;AACtCD,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAHY;;AAIb,KAACX,cAAc,CAAC6B,SAAhB,EAA2BX,KAA3B,EAAkCC,MAAlC,EAA0C;AACxCD,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACjB,SAAN,GAAkBkB,MAAM,CAACG,OAAzB;AACD,KAPY;;AAQb,KAACtB,cAAc,CAAC8B,QAAhB,EAA0BZ,KAA1B,EAAiCC,MAAjC,EAAyC;AACvCD,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACD;;AAXY;AAZc,CAAD,CAA9B;AA2BA,eAAeC,UAAU,CAACkB,OAA1B;AAEA,OAAO,MAAM;AAAEd,EAAAA,OAAF;AAAWO,EAAAA;AAAX,IAA0BX,UAAU,CAACmB,OAA3C","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchChartData } from \"services/chartData\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\n\nexport const fetchUsersData = createAsyncThunk(\"charts/get\", async () => {\n  const chartdata = await fetchChartData();\n  const newData = chartdata.map((data) => {\n    return {\n      type: data.type,\n      elements: data.elements.map((element) => {\n        return {\n          value: element,\n          color: getRandomColor(),\n        };\n      }),\n    };\n  });\n  return newData;\n});\n\nconst initialData = {\n  loading: false,\n  chartdata: [],\n  error: false,\n};\n\nconst chartSlice = createSlice({\n  name: \"charts\",\n  initialState: initialData,\n  reducers: {\n    addItem: (state, action) => {\n      console.log(\"action.payload\", action.payload);\n      state.chartdata.push(action.payload);\n    },\n    removeItem: (state, action) => {\n      state.chartdata.filter((data) => data.id !== action.payload.id);\n    },\n  },\n  extraReducers: {\n    [fetchUsersData.pending](state, action) {\n      state.loading = true;\n    },\n    [fetchUsersData.fulfilled](state, action) {\n      state.loading = false;\n      state.chartdata = action.payload;\n    },\n    [fetchUsersData.rejected](state, action) {\n      state.loading = false;\n      state.error = true;\n    },\n  },\n});\n\nexport default chartSlice.reducer;\n\nexport const { addItem, removeItem } = chartSlice.actions;\n"]},"metadata":{},"sourceType":"module"}