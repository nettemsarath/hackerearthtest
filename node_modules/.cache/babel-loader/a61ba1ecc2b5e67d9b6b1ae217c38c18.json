{"ast":null,"code":"var _jsxFileName = \"/home/sarath/React-learn/hackerearthtask/src/components/Piegraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Piegraph = _ref => {\n  _s();\n\n  let {\n    graphData,\n    title,\n    id,\n    type,\n    handleUpdateGraphItem\n  } = _ref;\n  const [enteredText, setEnteredText] = useState(\"\");\n\n  const handleChange = e => {\n    setEnteredText(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    const newEnteredgraphvalues = enteredText.split(\",\");\n    handleUpdateGraphItem({\n      type: type,\n      id: id,\n      elements: newEnteredgraphvalues.map(element => {\n        return {\n          value: parseInt(element),\n          color: getRandomColor()\n        };\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Edit values to see the changes in the Graph \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"12,22,34,45,56\",\n        style: {\n          margin: \"10px\",\n          padding: \"5px\"\n        },\n        value: enteredText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PieChart, {\n      width: 600,\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(Pie, {\n        dataKey: \"value\",\n        valueKey: \"value\",\n        data: graphData,\n        cx: 120,\n        cy: 200,\n        innerRadius: 60,\n        outerRadius: 80,\n        fill: \"#8884d8\",\n        paddingAngle: 5,\n        children: graphData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n          fill: entry.color\n        }, `cell-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Piegraph, \"znzL/pmtkvVt3hZyJzgC7WHc9/8=\");\n\n_c = Piegraph;\nexport default Piegraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piegraph\");","map":{"version":3,"sources":["/home/sarath/React-learn/hackerearthtask/src/components/Piegraph.js"],"names":["React","useState","PieChart","Pie","Cell","getRandomColor","Piegraph","graphData","title","id","type","handleUpdateGraphItem","enteredText","setEnteredText","handleChange","e","target","value","handleSubmit","newEnteredgraphvalues","split","elements","map","element","parseInt","color","display","justifyContent","alignItems","margin","padding","entry","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAoC,UAApC;AACA,SAASC,cAAT,QAA+B,wBAA/B;;;AAEA,MAAMC,QAAQ,GAAG,QAA2D;AAAA;;AAAA,MAA1D;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,EAApB;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA;AAA9B,GAA0D;AAC1E,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;;AACA,QAAMa,YAAY,GAAIC,CAAD,IAAO;AAC1BF,IAAAA,cAAc,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAG,MAAM;AACzB,UAAMC,qBAAqB,GAAGP,WAAW,CAACQ,KAAZ,CAAkB,GAAlB,CAA9B;AACAT,IAAAA,qBAAqB,CAAC;AACpBD,MAAAA,IAAI,EAAEA,IADc;AAEpBD,MAAAA,EAAE,EAAEA,EAFgB;AAGpBY,MAAAA,QAAQ,EAAEF,qBAAqB,CAACG,GAAtB,CAA2BC,OAAD,IAAa;AAC/C,eAAO;AACLN,UAAAA,KAAK,EAAEO,QAAQ,CAACD,OAAD,CADV;AAELE,UAAAA,KAAK,EAAEpB,cAAc;AAFhB,SAAP;AAID,OALS;AAHU,KAAD,CAArB;AAUD,GAZD;;AAaA,sBACE;AACE,IAAA,KAAK,EAAE;AACLqB,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,cAAc,EAAE,QAFX;AAGLC,MAAAA,UAAU,EAAE;AAHP,KADT;AAAA,4BAOE;AAAA,8BACE;AAAA,wBAAOpB,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AACE,QAAA,WAAW,EAAC,gBADd;AAEE,QAAA,KAAK,EAAE;AAAEqB,UAAAA,MAAM,EAAE,MAAV;AAAkBC,UAAAA,OAAO,EAAE;AAA3B,SAFT;AAGE,QAAA,KAAK,EAAElB,WAHT;AAIE,QAAA,QAAQ,EAAEE;AAJZ;AAAA;AAAA;AAAA;AAAA,cAHF,eASE;AAAQ,QAAA,OAAO,EAAEI,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAkBE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAE,GAAjB;AAAsB,MAAA,MAAM,EAAE,GAA9B;AAAA,6BACE,QAAC,GAAD;AACE,QAAA,OAAO,EAAC,OADV;AAEE,QAAA,QAAQ,EAAC,OAFX;AAGE,QAAA,IAAI,EAAEX,SAHR;AAIE,QAAA,EAAE,EAAE,GAJN;AAKE,QAAA,EAAE,EAAE,GALN;AAME,QAAA,WAAW,EAAE,EANf;AAOE,QAAA,WAAW,EAAE,EAPf;AAQE,QAAA,IAAI,EAAC,SARP;AASE,QAAA,YAAY,EAAE,CAThB;AAAA,kBAWGA,SAAS,CAACe,GAAV,CAAc,CAACS,KAAD,EAAQC,KAAR,kBACb,QAAC,IAAD;AAA4B,UAAA,IAAI,EAAED,KAAK,CAACN;AAAxC,WAAY,QAAOO,KAAM,EAAzB;AAAA;AAAA;AAAA;AAAA,gBADD;AAXH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CAxDD;;GAAM1B,Q;;KAAAA,Q;AA0DN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport { getRandomColor } from \"helpers/getRandomColor\";\n\nconst Piegraph = ({ graphData, title, id, type, handleUpdateGraphItem }) => {\n  const [enteredText, setEnteredText] = useState(\"\");\n  const handleChange = (e) => {\n    setEnteredText(e.target.value);\n  };\n  const handleSubmit = () => {\n    const newEnteredgraphvalues = enteredText.split(\",\");\n    handleUpdateGraphItem({\n      type: type,\n      id: id,\n      elements: newEnteredgraphvalues.map((element) => {\n        return {\n          value: parseInt(element),\n          color: getRandomColor(),\n        };\n      }),\n    });\n  };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div>\n        <div> {title} </div>\n        <p> Edit values to see the changes in the Graph </p>\n        <input\n          placeholder=\"12,22,34,45,56\"\n          style={{ margin: \"10px\", padding: \"5px\" }}\n          value={enteredText}\n          onChange={handleChange}\n        />\n        <button onClick={handleSubmit}>submit</button>\n      </div>\n      <PieChart width={600} height={400}>\n        <Pie\n          dataKey=\"value\"\n          valueKey=\"value\"\n          data={graphData}\n          cx={120}\n          cy={200}\n          innerRadius={60}\n          outerRadius={80}\n          fill=\"#8884d8\"\n          paddingAngle={5}\n        >\n          {graphData.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Pie>\n      </PieChart>\n    </div>\n  );\n};\n\nexport default Piegraph;\n"]},"metadata":{},"sourceType":"module"}